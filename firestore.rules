rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Subscribers collection - Allow public read/write for newsletter subscriptions
    match /subscribers/{subscriberId} {
      // Allow anyone to create a subscription (for newsletter signup)
      allow create: if isValidSubscription();
      
      // Allow reading by anyone (for stats) but limit fields
      allow read: if true;
      
      // Allow updates only for status changes (confirmation, unsubscribe)
      allow update: if isValidStatusUpdate();
      
      // No deletion allowed
      allow delete: if false;
    }
    
    // Analytics collection - Read-only for public stats
    match /analytics/{analyticsId} {
      // Allow reading for public analytics
      allow read: if true;
      
      // Only allow system writes (via Cloud Functions)
      allow write: if false;
    }
    
    // Settings collection - Read-only for public
    match /settings/{settingId} {
      // Allow reading for public settings
      allow read: if true;
      
      // No public writes to settings
      allow write: if false;
    }
    
    // Blog Views collection - Allow public read/write for view tracking
    match /blogViews/{viewId} {
      // Allow anyone to create a view (for blog view tracking)
      allow create: if isValidBlogView();
      
      // Allow reading by anyone (for view stats)
      allow read: if true;
      
      // No updates or deletes allowed (views are immutable)
      allow update, delete: if false;
    }
    
    // Blog View Metrics collection - Read-only for public stats
    match /blogViewMetrics/{metricsId} {
      // Allow reading for public view statistics
      allow read: if true;
      
      // Only allow system writes (via Cloud Functions or server-side code)
      allow write: if false;
    }
    
    // Helper functions for validation
    function isValidSubscription() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'status', 'subscribedAt', 'source', 'ipAddress', 'userAgent']) &&
             data.email is string &&
             data.email.matches('.*@.*\\..*') &&
             data.status == 'pending' &&
             data.subscribedAt is timestamp &&
             data.source is string &&
             data.ipAddress is string &&
             data.userAgent is string;
    }
    
    function isValidStatusUpdate() {
      let oldData = resource.data;
      let newData = request.resource.data;
      
      // Only allow status changes
      return oldData.email == newData.email &&
             oldData.subscribedAt == newData.subscribedAt &&
             oldData.source == newData.source &&
             newData.status in ['pending', 'confirmed', 'unsubscribed'];
    }
    
    function isValidBlogView() {
      let data = request.resource.data;
      return data.keys().hasAll(['blogSlug', 'viewedAt', 'sessionId']) &&
             data.blogSlug is string &&
             data.viewedAt is timestamp &&
             data.sessionId is string &&
             data.blogSlug.size() > 0 &&
             data.sessionId.size() > 0;
    }
  }
} 