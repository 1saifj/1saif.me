name: Deploy Portfolio to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      continue-on-error: true # Continue even if linting fails
      
    - name: Run tests
      run: npm run test --if-present
      
    - name: Build project
      run: npm run build
      env:
        NODE_ENV: production
        VITE_APP_ENV: production
        VITE_SITE_URL: https://1saif.me
        VITE_SITE_NAME: Saif Aljanahi Portfolio
        VITE_SITE_DESCRIPTION: Full-Stack Engineer specializing in Golang, Python, and Flutter development
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files-${{ matrix.node-version }}
        path: dist/
        retention-days: 7

  # Security scan job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level high --json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' | grep -v '^0$'; then
          echo "High or critical vulnerabilities found!"
          npm audit --audit-level high
          exit 1
        fi
      continue-on-error: true

  # Deploy to production (only on main/master branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        VITE_APP_ENV: production
        VITE_SITE_URL: https://1saif.me
        VITE_SITE_NAME: Saif Aljanahi Portfolio
        VITE_SITE_DESCRIPTION: Full-Stack Engineer specializing in Golang, Python, and Flutter development
        VITE_EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        VITE_EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
        VITE_EMAILJS_NEWSLETTER_TEMPLATE_ID: ${{ secrets.EMAILJS_NEWSLETTER_TEMPLATE_ID }}
        VITE_EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
        
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        
    # Alternative: Deploy to Netlify
    # - name: Deploy to Netlify
    #   uses: nwtgck/actions-netlify@v3.0
    #   with:
    #     publish-dir: './dist'
    #     production-branch: main
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     deploy-message: "Deploy from GitHub Actions"
    #   env:
    #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    #   if: github.ref == 'refs/heads/main'

  # Deploy preview (for PRs)
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for preview
      run: npm run build
      env:
        NODE_ENV: production
        VITE_APP_ENV: preview
        VITE_SITE_URL: https://preview-1saif.me
        VITE_SITE_NAME: Saif Aljanahi Portfolio (Preview)
        
    - name: Deploy preview to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        
  # Lighthouse CI job
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: .lighthouseci/
        retention-days: 30
        
  # Notify on success/failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, lighthouse]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "‚úÖ Portfolio deployed successfully to production!"
        echo "üåê Live at: https://1saif.me"
        
    - name: Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Check the logs for more details."
        exit 1 